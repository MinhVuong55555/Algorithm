Nguyên lý của thuật toán selection sort (sắp xếp chọn) là tìm kiếm phần tử nhỏ nhất
trong dãy số chưa được sắp xếp và đặt nó vào vị trí đầu tiên. Sau đó, tìm kiếm phần
tử nhỏ nhất tiếp theo trong dãy số chưa được sắp xếp và đặt nó vào vị trí thứ hai.
Quá trình này được lặp lại cho đến khi toàn bộ dãy số đã được sắp xếp.

Dưới đây là nguyên lý hoạt động của thuật toán selection sort:

Bắt đầu với dãy số chưa được sắp xếp.

Duyệt qua từng phần tử trong dãy số, bắt đầu từ vị trí đầu tiên.

Tìm phần tử nhỏ nhất trong dãy số chưa được sắp xếp từ vị trí hiện tại đến cuối dãy số.

Đổi chỗ phần tử nhỏ nhất tìm được với phần tử ở vị trí hiện tại.

Tiếp tục lặp lại các bước trên với dãy số chưa được sắp xếp từ vị trí tiếp theo cho đến khi dãy số đã được sắp xếp hoàn toàn.

Kết quả là thuật toán sẽ xây dựng dần dãy số đã sắp xếp bằng cách chọn phần tử nhỏ nhất và đặt nó vào đúng vị trí.

Thuật toán selection sort có hiệu suất tương đối tốt trong trường hợp dãy số nhỏ hoặc khi số lượng phép so sánh quan 
trọng hơn số lượng phép gán. Tuy nhiên, trong trường hợp xấu nhất và trung bình, thuật toán cần O(n^2) phép so sánh và
O(n) phép gán, làm cho nó không phù hợp cho các dãy số lớn.

// Chú ý: 2 vòng for lồng nhau. 2 đầu vào và 4 biến trong hàm.

#include <stdio.h>

void selectionSort(int arr[], int n){
    int i,j,minIndex,temp;
    for(i=0;i<n-1;i++){
        minIndex=i;
        
        // Tìm phần tử nhỏ nhất trong dãy chưa được sắp xếp
        for(j=i+1;j<n;j++){
            if(arr[minIndex]>arr[j]){
                minIndex=j;
            }
        }
        // Đổi chỗ phần tử nhỏ nhất với phần tử ở vị trí hiện tại
        temp=arr[i];
        arr[i]=arr[minIndex];
        arr[minIndex]=temp;
    }
}

int main() {
    int arr[] = {9,8,7,6,5,4,3,2,1};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    selectionSort(arr, n);

    printf("\nDãy số sau khi sắp xếp: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}
